#!/usr/bin/env python

import cherrypy

from pathlib import Path
from argparse import ArgumentParser
from typing import Optional, Set, Tuple, List

import os
import random
import math
import shelve

STARTRATING = 1000

def set_rating(item: str, score: float, filename: str) -> None:
	with shelve.open(filename) as db:
		db[item] = score

def set_ratings(items: List[Tuple[str,float]], filename: str) -> None:
	with shelve.open(filename) as db:
		for item_name, item_score in items:
			db[item_name] = item_score

def get_rating(item: str, filename: str) -> float:
	with shelve.open(filename) as db:
		return db.get(item, STARTRATING)

def get_all_ratings(filename: str, limit: Optional[Set[int]] = None, offset: int = 0) -> List[Tuple[str, float]]:
	with shelve.open(filename) as db:
		sorted_scores = sorted(db.items(), key = lambda x: x[1], reverse = True)
		return sorted_scores[offset:offset+limit if limit else None]

def clean_shelf(preserved_keys: Set[str], filename: str) -> None:
	with shelve.open(filename) as db:
		keys_to_delete = [key for key in db.keys() if key not in preserved_keys]
		if keys_to_delete:
			cherrypy.log(f'about to remove {len(keys_to_delete)} keys (of {len(db.keys())}) from {filename} - is this correct?')
			_ = input('Press enter to continue or ctrl-C to exit.')
		for key in keys_to_delete:
			del db[key]
		keys_to_default = [key for key in preserved_keys if key not in db.keys()]
		cherrypy.log(f'setting a default value for {len(keys_to_default)} keys')
		for key in keys_to_default:
			db[key] = STARTRATING

class Depletable_Stack:
	def __init__(self, from_folder: str, session_length: int, db_location: str, prefilled: bool, poolshrink: int, patterns: List[str] = ['*.jpg', '*.png', '*.mp4', '*.gif']):
		self._iteration = 0
		self._poolshrink = poolshrink;
		self._dequeue_events = {}
		self._dbl = db_location
		self._session_length = session_length

		if not prefilled:
			directory = Path(from_folder)
			permanent_items = [str(file) for pattern in patterns for file in directory.rglob(pattern)]
			clean_shelf(set(permanent_items), self._dbl)
		
		self.shuffle()

	def shuffle(self):
		self._iteration += 1
		
		# get_all_ratings already sorts high to low
		ratings = get_all_ratings(self._dbl)
		if(self._poolshrink > 0):
			p_pool_size = math.ceil(len(ratings) * (1 - (self._iteration / (self._iteration + self._poolshrink))))
			if p_pool_size < len(ratings):
				print(f'shrinking pool from {len(ratings)} to {p_pool_size}')
				ratings = ratings[:p_pool_size]
		
		tiers = {1: [], 2: [], 3: [], 4: []}
		elo_min = min(x[1] for x in ratings)
		elo_step = (max(x[1] for x in ratings) + 1 - elo_min) / len(tiers)
		for k in tiers.keys():
			tiers[k] = [x[0] for x in ratings if elo_min + ((k-1) * elo_step) <= x[1] < elo_min + ((k) * elo_step)]

		matchups = []
		leftovers = []
		for tier, items in tiers.items():
			candidates = leftovers + items
			leftovers = []
			random.shuffle(candidates)
			while len(candidates) >= 2:
				matchups.append((candidates.pop(), candidates.pop()))
			if(candidates):
				leftovers.extend(candidates)
		if leftovers:
			for leftover in leftovers:
				matchups.append((leftover, random.choice([x[0] for x in ratings if x[0] != leftover])))
				print(f'pairing leftover with random item:')
				print(f'  {matchups[-1]}')

		if(self._session_length > 0):
			matchups = matchups[:self._session_length]
		self._temporary_stack = matchups[::-1]

	def stack_remaining(self):
		return len(self._temporary_stack)

	def peek(self):
		if len(self._temporary_stack) == 0:
			self.shuffle()
		return self._temporary_stack[0]
	
	def dequeue(self, pair):
		if pair in self._temporary_stack:
			self._dequeue_events[pair[0]] = self._dequeue_events.get(pair[0], 0) + 1
			self._dequeue_events[pair[1]] = self._dequeue_events.get(pair[1], 0) + 1
			self._temporary_stack.remove(pair)

class Elo_Tournament:
	def __init__(self, items: Depletable_Stack, db_location: str):
		self.items = items
		self._dbl = db_location

	def score_match(self, a: str, b: str, a_score: float, b_score: float, k: float = 16):
		"""Special case here for 0, 0 - punish both candidates with a loss"""

		# draw
		if a == b and a == 0.5:
			self.items.dequeue((a, b))
			return

		a_rating = get_rating(a, self._dbl)
		b_rating = get_rating(b, self._dbl)
	
		a_expected = 1.0 / (1.0 + (10.0 ** ((b_rating - a_rating) / 400.0)))
		b_expected = 1.0 / (1.0 + (10.0 ** ((a_rating - b_rating) / 400.0)))

		new_a_rating = a_rating + k * (a_score - a_expected)
		new_b_rating = b_rating + k * (b_score - b_expected)

		set_ratings([
			(a, new_a_rating),
			(b, new_b_rating),
		], self._dbl)
		self.items.dequeue((a, b))
		self.items.dequeue((b, a))

	def menu_div(self, tag: str = 'Clean URL and Continue Rating') -> str:
		return f'''
<div class="full-width-container">
	<p align="center"><a href="/results">See Results</a> - <a href="/">{tag}</a> - <a href="/script">Purge</a> - {self.items.stack_remaining()} remaining</p>
</div>'''

	@cherrypy.expose 
	def index(self, a = None, b = None, result = None, force_im1 = None, force_im2 = None, count = None) -> str:
		if a and b and result:
			try:
				# result value here is a's result
				result_value = float(result)
				if result_value not in [-1.0, 0.0, 0.5, 1.0]:
					raise ValueError('result must be -1.0, 0.0, 0.5, or 1.0')
				elif result_value == 0:
					# a loss
					a_result, b_result = 0, 1
				elif result_value == 1:
					# a win
					a_result, b_result = 1, 0
				elif result_value == -1:
					# punish
					a_result, b_result = 0, 0
				else:
					# draw
					a_result, b_result = 0.5, 0.5
				self.score_match(a, b, a_result, b_result)
			except ValueError as ve:
				return f'ValueError: {repr(ve)}'

		# we can now peek safely as the item is not dequeued until it is voted on
		im1, im2 = self.items.peek()
		if force_im1:
			im1 = force_im1
		if force_im2:
			im2 = force_im2

		if(im1.endswith('.mp4')):
			element1 = f'<video controls autoplay loop muted><source src="static/{im1}" type="video/mp4"/></video>'
		else:
			element1 = f'<img src="static/{im1}"/>'
		if(im2.endswith('.mp4')):
			element2 = f'<video controls autoplay loop muted><source src="static/{im2}" type="video/mp4"/></video>'
		else:
			element2 = f'<img src="static/{im2}"/>'

		if count:
			rc_clause = f'&count={count}'
		else:
			rc_clause = ''

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		document.onkeyup = KeyPressed;
		function KeyPressed( e ) {{
			var key = ( window.event ) ? event.keyCode : e.keyCode;

			switch( key ) {{
				case 37: //left
				case 65: //a
					window.location.href="/?a={im1}&b={im2}&result=1.0"
					break;
				case 38: //up
				case 87: //w
					window.location.href="/?a={im1}&b={im2}&result=0.5"
					break;
				case 39: //right
				case 68: //d
					window.location.href="/?a={im2}&b={im1}&result=1.0"
					break;
				case 40: //down
				case 83: //s
					window.location.href="/results{rc_clause}"
					break;
				case 46: //del
					window.location.href="/?a={im2}&b={im1}&result=-1.0"
					break;
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Punt')}
	<div class="twoup">
		<div class="gallery-item"><a href="/?a={im1}&b={im2}&result=1">{element1}</a></div>
		<div class="gallery-item"><a href="/?a={im2}&b={im1}&result=1">{element2}</a></div>
	</div>
</body>
</html>
'''
		return template

	@cherrypy.expose
	def script(self, offset: int = 20) -> str:
		offset = int(offset)
		results = get_all_ratings(self._dbl, limit = None, offset = offset)
		commands = '\n'.join([f'rm "{item[0]}" # {item[1]}' for item in results])
		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		function selectText(element) {{
			if(window.getSelection) {{
				const selection = window.getSelection();
				const range = document.createRange();
				range.selectNodeContents(element);
				selection.removeAllRanges();
				selection.addRange(range)
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Return to Scoring')}
	<div class="code-block">
		<pre># you can call this page with different ?offset= arguments to preserve more files from deletion - currently {offset}. offset: <a href="/script?offset=10">10</a> - <a href="/script?offset=20">20</a> - <a href="/script?offset=30">30</a> - <a href="/script?offset=40">40</a> - <a href="/script?offset=60">60</a> - <a href="/script?offset=80">80</a> - <a href="/script?offset=100">100</a></pre>
		<pre onclick="selectText(this)">{commands}</pre>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def results(self, start: int = 0, count: int = 0, switch_a: str = None, switch_b: str = None) -> str:
		if switch_a and switch_b:
			old_a_rating = get_rating(switch_a, self._dbl)
			old_b_rating = get_rating(switch_b, self._dbl)
			set_ratings([
				(switch_a, old_b_rating),
				(switch_b, old_a_rating),
			], self._dbl)

		start = max(0, int(start))
		count = max(0, int(count))

		results = get_all_ratings(self._dbl, limit = count if count > 0 else None, offset = start)
		if count == 0:
			count = len(results)

		gallery_items = []
		for index, x in enumerate(results):
			if(x[0].endswith('.mp4')):
				element = f'<video loop muted data-path="{x[0]}"><source src="static/{x[0]}" type="video/mp4"/>'
			else:
				element = f'<img data-path="{x[0]}" src="static/{x[0]}">'
			gallery_items.append(f'<div class="gallery-item {"prestige" if index <20 else ""}">{element}<div class="score">Score: {x[1]:.3f}</div></div>')
		gallery_string = '\n'.join(gallery_items)

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<style>
		.highlighted {{
			border: 2px solid purple;
		}}
	</style>
	<script language="javascript" type="text/javascript">
		document.addEventListener('DOMContentLoaded', () => {{
			const divs = document.querySelectorAll('div.gallery-item');
			const contest_link = document.getElementById('contestLink');
			const switch_link = document.getElementById('switchLink');
			const start={start};
			const count={count};

			contest_link.removeAttribute('href');
			contest_link.style.pointerEvents = 'none';
			contest_link.style.opacity = 0.5;

			switch_link.removeAttribute('href');
			switch_link.style.pointerEvents = 'none';
			switch_link.style.opacity = 0.5;

			let highlighted = [];

			divs.forEach(div => {{
				div.addEventListener('click', () => {{
					// Add or remove highlight from the clicked div
					div.classList.toggle('highlighted');
					// Update the array of highlighted divs
					if(div.classList.contains('highlighted')) {{
						highlighted.push(div);
					}} else {{
						highlighted = highlighted.filter(h => h !== div);
					}}
					// If more than two divs are highlighted, unhighlight the oldest one
					if(highlighted.length > 2) {{
						highlighted[0].classList.remove('highlighted');
						highlighted.shift();
					}}
					// If exactly two divs are highlighted, enable the matchup link
					if(highlighted.length == 2) {{
						const first_image = highlighted[0].querySelector('img') || highlighted[0].querySelector('video');
						const second_image = highlighted[1].querySelector('img') || highlighted[1].querySelector('video');
						let first_item = first_image.dataset.path;
						let second_item = second_image.dataset.path;

						if(first_item.startsWith('static/')) {{
							first_item = first_item.slice(7);
						}}
						if(second_item.startsWith('static/')) {{
							second_item = second_item.slice(7);
						}}

						contest_link.href = '/?force_im1=' + first_item + '&force_im2=' + second_item;
						if(count>0) contest_link.href += '&count=' + count;
						if(start>0) contest_link.href += '&start=' + start;
						contest_link.style.pointerEvents = 'auto';
						contest_link.style.opacity = 1;

						switch_link.href = '/results?switch_a=' + first_item + '&switch_b=' + second_item;
						if(count>0) switch_link.href += '&count=' + count;
						if(start>0) switch_link.href += '&start=' + start;
						switch_link.style.pointerEvents = 'auto';
						switch_link.style.opacity = 1;
					}} else {{
						contest_link.removeAttribute('href');
						contest_link.style.pointerEvents = 'none';
						contest_link.style.opacity = 0.5;
						
						switch_link.removeAttribute('href');
						switch_link.style.pointerEvents = 'none';
						switch_link.style.opacity = 0.5;

					}}
				}});
			}});
		}});
	</script>
</head>
<body>
	{self.menu_div('Continue Rating')}
	<div class="full-width-container">
		<a id="contestLink" href="/">Force Matchup between Clicked Items</a> - <a id="switchLink" href="/results">Switch Clicked Items</a>
	</div>
	<div class="gallery">
		{gallery_string}
	</div>
	<div class="full-width-container">
		<p><a href='?start={int(start-count)}&count={count}'>Back</a> / <a href='?start={int(start+count)}&count={count}'>Forwards</a></p>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def stylesheet(self) -> str:
		cherrypy.response.headers['Content-Type'] = 'text/css'
		return '''body {
	align-items: center;
	background-color: #f4f4f4;
	color: #333;
	display: flex;
	flex-direction: column;
	font-family: 'Arial', sans-serif;
	height: 100vh;
	line-height: 1.6;
	margin: 0;
	overflow-x: hidden;
	padding: 20px;
}

.twoup {
	display: flex;
	justify-content: center;
	width: 100%;
}

.twoup img, .twoup video {
	border-radius: 5px;
	height: 100%;
	max-height: 80vh;
	object-fit: contain;
	width: auto;
}

.gallery {
	display: grid;
	grid-gap: 20px;
	grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
	padding: 20px;
	width: 100%;
}

.gallery-item {
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 5px;
	box-shadow: 0 5px 15px rgba(0,0,0,0.1);
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 15px;
}

.prestige {
	background-color: #fff3e0;
}

.gallery-item img, .gallery-item video {
	border-radius: 5px;
	height: auto;
	object-fit: cover;
	width: 100%;
}

gallery-item div.score {
	color: #007bff;
	font-size: 18px;
	margin-top: 10px;
}

.full-width-container {
	background-color: #f0f0f0;
	padding: 5px;
	text-align: center;
	width: 100%;
}

.code-block {
	background-color: #d0d0d0;
	padding: 10px;
	width: 98%;
}	
'''

if __name__ == "__main__":
	global FILE_LOCATION
	parser = ArgumentParser()
	parser.add_argument("-p", "--port", dest="port", default=9090, type=int, help="port to run the server on", metavar="PORTNUM")
	parser.add_argument("-l", "--poolshrink", dest="poolshrink", default=50, type=int, help="k value for poolshrinking (disable with -1)", metavar="POOLSHRINK")
	parser.add_argument("-s", "--session", dest="session", default=-1, type=int, help="number of image pairs to test before refilling the stack", metavar="SESSION")
	parser.add_argument("-d", "--dbname", dest="dbname", default="scores.shelf", type=str, help="name of ratings database file", metavar="NAME")
	parser.add_argument("-r", "--prefilled", dest="prefilled", action="store_true", help="whether the ratings database file has been prepopulated")
	parser.add_argument("-b", "--basedir", default=".", type=str, help="the folder to read files from if not using a prepopulated ratings database file", metavar="FOLDER")

	args = parser.parse_args()
	
	basedir = os.path.abspath(args.basedir)
	itemcollection = Depletable_Stack(basedir, args.session, args.dbname, args.prefilled, args.poolshrink)

	cherry_config = {
		'global': {
			'server.socket_port': args.port, 
			'log.screen': False,
			'log.access_file': '/dev/null',
			'log.error_file': '/dev/stdout',
		},
		'/static': {
			'tools.staticdir.on': True,	
			'tools.staticdir.dir': '/'
		},
	}
	cherrypy.quickstart(Elo_Tournament(itemcollection, args.dbname), '/', config = cherry_config)

