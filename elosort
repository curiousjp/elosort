#!/usr/bin/env python

import cherrypy
import sqlite3
from optparse import OptionParser
import os
import hashlib
import glob
import random

STARTRATING = 1000

class ELODB:
	def __init__(self, dbfile):
		self.dbfile = dbfile
		try:
			open(self.dbfile)
			con = sqlite3.connect(self.dbfile)
			print(f'{self.dbfile} found :)')
		except IOError:
			print(f'{self.dbfile} not found, making a new one')
			con = sqlite3.connect(self.dbfile)
			c = con.cursor()
			c.execute('create table Item (hash text PRIMARY_KEY, path text, rating integer)')
			con.commit()
			c.close()
			con.close()

	def filehash(self, filepath):
		with open(filepath, 'rb') as f:
			m = hashlib.sha256()
			m.update(f.read())
		return m.hexdigest()

	def getrating(self, filepath):
		"""
		Get the Elo rating for a given file.

		If the file isn't already in the db, add it with the starting rating
		"""
		filehash = self.filehash(filepath)
		con = sqlite3.connect(self.dbfile)
		c = con.cursor()
		c.execute('SELECT rating from Item where hash = ?', (filehash,))
		result = c.fetchone()
		c.close()
		con.close()

		if result:
			rating = result[0]
			return rating
		else:
			self.initrating(filepath)
			return STARTRATING

	def setrating(self, filepath, newrating):
		filehash = self.filehash(filepath)
		con = sqlite3.connect(self.dbfile)
		c = con.cursor()
		c.execute('UPDATE Item SET path = ?, rating = ? WHERE hash = ?', (filepath, newrating, filehash))
		con.commit()
		c.close()
		con.close()

	def initrating(self, filepath):
		"""Add a new file to the db, with the starting rating"""
		filehash = self.filehash(filepath)
		abspath = os.path.abspath(filepath)
		con = sqlite3.connect(self.dbfile)
		c = con.cursor()
		c.execute('INSERT into Item values (?, ?, ?)', (filehash, abspath, STARTRATING))
		con.commit()
		c.close()
		con.close()

	def getresults(self, start=0, count=10):
		con = sqlite3.connect(self.dbfile)
		c = con.cursor()

		sql_query = 'SELECT * from Item ORDER BY rating DESC'
		if count not in [0, None]:
			sql_query += f' LIMIT {int(count)}'
		else:
			sql_query += ' LIMIT -1'
		if start not in [0, None]:
			sql_query += f' OFFSET {int(start)}'

		c.execute(sql_query)
		results = c.fetchall()
		c.close()
		con.close()

		fields = ['hash', 'path', 'rating']
		results = [dict(zip(fields, row)) for row in results]
		return results

class Itemcollection:
	def __init__(self, items):
		self.items = items
		self.shuffle()

	def shuffle(self):
		self.itemstack = self.items[:]
		random.shuffle(self.itemstack)

	def __next__(self):
		if not self.itemstack:
			self.shuffle()
		return self.itemstack.pop()

class Elosort:
	def __init__(self, db, items):
		self.db = db
		self.items = items

	def menu_div(self, tag = 'Punt'):
		return f'''
			<div class="full-width-container">
				<p align="center"><a href="/results">See Results</a> - <a href="/">{tag}</a> - <a href="/script">Purge</a></p>
			</div>'''

	@cherrypy.expose 
	def index(self, a=None, b=None, result=None):
		if a and b and result:
			if result in ("0", "1", "0.5"):
				self.match(a, b, float(result))
			else:
				return 'Invalid value for result'

		im1 = next(self.items)
		im2 = next(self.items)

		template = f'''<!DOCTYPE html>
		<html>
		<head>
			<link rel="stylesheet" href="/stylesheet" type="text/css">
			<script language="javascript" type="text/javascript">
				document.onkeyup = KeyPressed;
				function KeyPressed( e ) {{
					var key = ( window.event ) ? event.keyCode : e.keyCode;

					switch( key ) {{
						case 37: //left
							window.location.href="/?a={im1}&b={im2}&result=1"
							break;
						case 39: //right
							window.location.href="/?a={im2}&b={im1}&result=1"
							break;
					}}
				}}
			</script>
		</head>
		<body>
			{self.menu_div('Punt')}
			<div class="twoup">
				<div class="gallery-item"><a href="/?a={im1}&b={im2}&result=1"><img src="static/{im1}"></a></div>
				<div class="gallery-item"><a href="/?a={im2}&b={im1}&result=1"><img src="static/{im2}"></a></div>
			</div>
		</body>
		</html>
		'''
		return template


	def match(self, a, b, result):
		k = 16
		arating = self.db.getrating(a)
		brating = self.db.getrating(b)
		expected = 1 / (1 + (10 ** ((brating - arating) / 400.)))

		newarating = arating + (k * (result - expected))
		newbrating = brating - (k * (result - expected))

		self.db.setrating(a, newarating)
		self.db.setrating(b, newbrating)

	@cherrypy.expose
	def script(self, offset=20):
		offset = int(offset)
		results = self.db.getresults(start = offset, count = 0)
		commands = '\n'.join([f'rm {os.path.basename(item["path"])} # {item["rating"]}' for item in results])		
		template = f'''<!DOCTYPE html>
		<html>
		<head>
			<link rel="stylesheet" href="/stylesheet" type="text/css">
		</head>
		<body>
			{self.menu_div('Return to Scoring')}
			<div class="code-block">
				<pre>{commands}</pre>
			</div>
		</body>
		</html>
		'''
		return template
	
	@cherrypy.expose
	def stylesheet(self):
		cherrypy.response.headers['Content-Type'] = 'text/css'
		return '''body {
	align-items: center;
	background-color: #f4f4f4;
	color: #333;
	display: flex;
	flex-direction: column;
	font-family: 'Arial', sans-serif;
	height: 100vh;
	line-height: 1.6;
	margin: 0;
	padding: 20px;
}

.twoup {
	align-items: center;
	display: flex;
	justify-content: center;
	width: 100%;
}

.gallery {
	display: grid;
	grid-gap: 20px;
	grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
	padding: 20px;
	width: 100%;
}

.gallery-item {
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 5px;
	box-shadow: 0 5px 15px rgba(0,0,0,0.1);
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 15px;
}

.gallery-item img {
	border-radius: 5px;
	height: auto;
	object-fit: cover;
	width: 100%;
}

gallery-item div.score {
	color: #007bff;
	font-size: 18px;
	margin-top: 10px;
}

.full-width-container {
	background-color: #f0f0f0;
	padding: 10px;
	text-align: center;
	width: 98%;
}

.code-block {
	background-color: #d0d0d0;
	padding: 10px;
	width: 98%;
}	
'''


	@cherrypy.expose
	def results(self, start=0, count=0):
		start = max(0, int(start))
		count = max(0, int(count))

		results = self.db.getresults(start, count)
		if count == 0:
			count = len(results)

		print(results[0])
		gallery_items = [ f'<div class="gallery-item"><img src="static/{x["path"]}"><div class="score">Score: {x["rating"]:.3f}</div></div>' for x in results]
		gallery_string = '\n'.join(gallery_items)

		template = f'''<!DOCTYPE html>
			<html>
			<head>
				<link rel="stylesheet" href="/stylesheet" type="text/css">
			</head>
			<body>
				{self.menu_div('Continue Rating')}
				<div class="gallery">
					{gallery_string}
				</div>
				<div class="full-width-container">
					<p><a href='?start={int(start-count)}&count={count}'>Back</a> / <a href='?start={int(start+count)}&count={count}'>Forwards</a></p>
				</div>
			</body>
			</html>
			'''
		return template
	
if __name__ == "__main__":
	parser = OptionParser()
	parser.add_option("--dbname", dest="dbname", default=".elosortdb.sql3",	help="Name of rating database file", metavar="NAME")
	parser.add_option("--filetypes", dest="filetypes", default="jpg,png,gif", help="comma separated list of file extensions", metavar="LIST")
	parser.add_option("--port", dest="port", default=8080, type="int", help="Port to run the server on", metavar="PORTNUM")
	(opts, args) = parser.parse_args()
	if args:
		basedir = args[0]
	else:
		basedir = "."
	basedir = os.path.abspath(basedir)
	dbfilename = os.path.join(basedir, opts.dbname)
	db = ELODB(dbfilename)
	filetypes = opts.filetypes.split(",")
	items = []
	for filetype in filetypes:
		items += glob.glob(os.path.join(basedir, "*."+filetype))
	itemcollection = Itemcollection(items)
	conf = {
		'global': {'server.socket_port': opts.port},
		'/static': {'tools.staticdir.on': True,	'tools.staticdir.dir': "/"}
	}
	cherrypy.quickstart(Elosort(db, itemcollection), "/", config=conf)

