#!/usr/bin/env python

import cherrypy
import sqlite3
from optparse import OptionParser
import os
import hashlib
import glob
import random

STARTRATING = 1000

class ELO_DB:
	def __init__(self, dbfile):
		self.dbfile = dbfile
		if not os.path.isfile(self.dbfile):
			cherrypy.log(f'{self.dbfile} not found, making a new one')
			try:
				connection = sqlite3.connect(self.dbfile)
				with connection:
					connection.execute('CREATE TABLE Item (hash TEXT PRIMARY_KEY, path TEXT, rating INTEGER)')
			except(sqlite3.OperationalError, sqlite3.IntegrityError, IOError) as e:
				cherrypy.log(f'could not create a new table in {self.dbfile}', traceback = True)
				raise
			connection.close()
		else:
			cherrypy.log(f'{self.dbfile} found :)')

	def get_file_hash(self, filepath):
		with open(filepath, 'rb') as f:
			hash_object = hashlib.sha256()
			hash_object.update(f.read())
		return hash_object.hexdigest()

	def get_file_rating(self, filepath, createrating = True):
		"""
		Get the ELO rating for a given file.

		If the file isn't already in the db, add it with the starting rating if createrating is True
		"""
		file_hash = self.get_file_hash(filepath)

		try:
			connection = sqlite3.connect(self.dbfile)
			with connection:
				cursor = connection.execute('SELECT rating FROM Item WHERE hash = ?', (file_hash,))
				result = cursor.fetchone()
		except(sqlite3.OperationalError, sqlite3.IntegrityError, IOError) as e:
			cherrypy.log(f'error reading ratings from database file {self.dbfile}', traceback = True)

		if result:
			return result[0]
		elif createrating:
			self.create_file_rating(filepath)
			return STARTRATING
		else:
			return None

	def set_file_rating(self, filepath, newrating):
		file_hash = self.get_file_hash(filepath)
		connection = sqlite3.connect(self.dbfile)
		with connection:
			connection.execute('UPDATE Item SET path = ?, rating = ? WHERE hash = ?', (filepath, newrating, file_hash))
		connection.close()

	def create_file_rating(self, filepath):
		"""Add a new file to the db, with the starting rating"""
		file_hash = self.get_file_hash(filepath)
		abspath = os.path.abspath(filepath)
		connection = sqlite3.connect(self.dbfile)
		with connection:
			connection.execute('INSERT INTO Item VALUES (?, ?, ?)', (file_hash, abspath, STARTRATING))
		connection.close()

	def get_all_ratings(self, start=0, count=10, filter = None):
		sql_query = 'SELECT * FROM Item ORDER BY rating DESC'
		if count not in [0, None]:
			sql_query += f' LIMIT {int(count)}'
		else:
			sql_query += ' LIMIT -1'
		if start not in [0, None]:
			sql_query += f' OFFSET {int(start)}'
		connection = sqlite3.connect(self.dbfile)
		with connection:
			cursor = connection.execute(sql_query)
		rows = [dict(zip(['hash', 'path', 'rating'], row)) for row in cursor.fetchall()]
		connection.close()
		# really, there should be a more proactive approach to knocking out 'dead' 
		# records in the database, but I see the databases as kind of ephemeral
		if filter:
			rows = [row for row in rows if row['path'] in filter]
		return rows

class Depletable_Stack:
	def __init__(self, items):
		self._permanent_items = items
		self.shuffle()

	def _rebalance_stack(self):
		# make up a pair if the stack is odd sized
		if len(self._temporary_stack) % 2 == 1:
			cherrypy.log(f'adding bonus item to rebalance stack')
			self._temporary_stack.append(random.choice(self._permanent_items[:]))

	def shuffle(self):
		cherrypy.log(f'reshuffling, {len(self._permanent_items)} items entering the stack')
		self._temporary_stack = self._permanent_items[:]
		random.shuffle(self._temporary_stack)
		self._rebalance_stack()

	def stack_remaining(self):
		return len(self._temporary_stack)

	def known_items(self):
		return self._permanent_items[:]
	
	def peek(self):
		if len(self._temporary_stack) == 0:
			self.shuffle()
		self._rebalance_stack()
		return tuple(self._temporary_stack[0:2])
	
	def dequeue(self, item):
		if item in self._temporary_stack:
			self._temporary_stack.remove(item)

class ELO_Sort:
	def __init__(self, db: ELO_DB, items: Depletable_Stack):
		self.db = db
		self.items = items

	def score_match(self, a, b, result_a, k = 16):
		"""The 'result' here is the result for player A."""

		if a == b:
			self.items.dequeue(a)
			return

		a_rating = self.db.get_file_rating(a)
		b_rating = self.db.get_file_rating(b)

		if result_a == 1:
			a_score, b_score = 1.0, 0.0
		elif result_a == 0:
			a_score, b_score = 0.0, 1.0
		else:
			a_score, b_score = 0.5, 0.5
		
		a_expected = 1.0 / (1.0 + (10.0 ** ((b_rating - a_rating) / 400.0)))
		b_expected = 1.0 / (1.0 + (10.0 ** ((a_rating - b_rating) / 400.0)))

		new_a_rating = a_rating + k * (a_score - a_expected)
		new_b_rating = b_rating + k * (b_score - b_expected)

		# print(f'elo: a: rating: {a_rating}, score: {a_score}, expected: {a_expected}, new: {new_a_rating}')
		# print(f'elo: b: rating: {b_rating}, score: {b_score}, expected: {b_expected}, new: {new_b_rating}')

		self.db.set_file_rating(a, new_a_rating)
		self.items.dequeue(a)
		self.db.set_file_rating(b, new_b_rating)
		self.items.dequeue(b)

	def menu_div(self, tag = 'Clean URL and Continue Rating'):
		return f'''
<div class="full-width-container">
	<p align="center"><a href="/results">See Results</a> - <a href="/">{tag}</a> - <a href="/script">Purge</a> - {self.items.stack_remaining()} remaining</p>
</div>'''

	@cherrypy.expose 
	def index(self, a = None, b = None, result = None, force_im1 = None, force_im2 = None):
		if a and b and result:
			try:
				result_value = float(result)
				if result_value not in [0.0, 0.5, 1.0]:
					raise ValueError('result must be 0.0, 0.5, or 1.0')
				self.score_match(a, b, result_value)
			except ValueError as ve:
				return f'ValueError: {repr(ve)}'

		# we can now peek safely as the item is not dequeued until it is voted on
		im1, im2 = self.items.peek()
		if force_im1:
			im1 = force_im1
		if force_im2:
			im2 = force_im2

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		document.onkeyup = KeyPressed;
		function KeyPressed( e ) {{
			var key = ( window.event ) ? event.keyCode : e.keyCode;

			switch( key ) {{
				case 37: //left
					window.location.href="/?a={im1}&b={im2}&result=1.0"
					break;
				case 38: //up
					window.location.href="/?a={im1}&b={im2}&result=0.5"
					break;
				case 39: //right
					window.location.href="/?a={im2}&b={im1}&result=1.0"
					break;
				case 40: //down
					window.location.href="/results"
					break;
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Punt')}
	<div class="twoup">
		<div class="gallery-item"><a href="/?a={im1}&b={im2}&result=1"><img src="static/{im1}"></a></div>
		<div class="gallery-item"><a href="/?a={im2}&b={im1}&result=1"><img src="static/{im2}"></a></div>
	</div>
</body>
</html>
'''
		return template

	@cherrypy.expose
	def script(self, offset=20):
		offset = int(offset)
		results = self.db.get_all_ratings(start = offset, count = 0, filter = self.items.known_items())
		commands = '\n'.join([f'rm {os.path.basename(item["path"])} # {item["rating"]}' for item in results])		
		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		function selectText(element) {{
			if(window.getSelection) {{
				const selection = window.getSelection();
				const range = document.createRange();
				range.selectNodeContents(element);
				selection.removeAllRanges();
				selection.addRange(range)
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Return to Scoring')}
	<div class="code-block">
		<pre># you can call this page with different ?offset= arguments to preserve more files from deletion.</pre>
		<pre onclick="selectText(this)">{commands}</pre>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def results(self, start=0, count=0):
		start = max(0, int(start))
		count = max(0, int(count))

		results = self.db.get_all_ratings(start, count, filter = self.items.known_items())
		if count == 0:
			count = len(results)

		gallery_items = [ f'<div class="gallery-item"><img data-path="{x["path"]}" src="static/{x["path"]}"><div class="score">Score: {x["rating"]:.3f}</div></div>' for x in results]
		gallery_string = '\n'.join(gallery_items)

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<style>
		.highlighted {{
			border: 2px solid purple;
		}}
	</style>
	<script language="javascript" type="text/javascript">
		document.addEventListener('DOMContentLoaded', () => {{
			const divs = document.querySelectorAll('div.gallery-item');
			const link = document.getElementById('contestLink')

			link.removeAttribute('href');
			link.style.pointerEvents = 'none';
			link.style.opacity = 0.5;

			let highlighted = [];

			divs.forEach(div => {{
				div.addEventListener('click', () => {{
					// Add or remove highlight from the clicked div
					div.classList.toggle('highlighted');
					// Update the array of highlighted divs
					if(div.classList.contains('highlighted')) {{
						highlighted.push(div);
					}} else {{
						highlighted = highlighted.filter(h => h !== div);
					}}
					// If more than two divs are highlighted, unhighlight the oldest one
					if(highlighted.length > 2) {{
						highlighted[0].classList.remove('highlighted');
						highlighted.shift();
					}}
					// If exactly two divs are highlighted, enable the matchup link
					if(highlighted.length == 2) {{
						const first_image = highlighted[0].querySelector('img');
						const second_image = highlighted[1].querySelector('img');
						let first_item = first_image.dataset.path;
						let second_item = second_image.dataset.path;

						if(first_item.startsWith('static/')) {{
							first_item = first_item.slice(7);
						}}
						if(second_item.startsWith('static/')) {{
							second_item = second_item.slice(7);
						}}

						link.href = '/?force_im1=' + first_item + '&force_im2=' + second_item;
						link.style.pointerEvents = 'auto';
						link.style.opacity = 1;
					}} else {{
						link.removeAttribute('href');
						link.style.pointerEvents = 'none';
						link.style.opacity = 0.5;
					}}
				}});
			}});
		}});
	</script>
</head>
<body>
	{self.menu_div('Continue Rating')}
	<div class="full-width-container">
		<a id="contestLink" href="/">Force Matchup between Clicked Items</a>
	</div>
	<div class="gallery">
		{gallery_string}
	</div>
	<div class="full-width-container">
		<p><a href='?start={int(start-count)}&count={count}'>Back</a> / <a href='?start={int(start+count)}&count={count}'>Forwards</a></p>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def stylesheet(self):
		cherrypy.response.headers['Content-Type'] = 'text/css'
		return '''body {
	align-items: center;
	background-color: #f4f4f4;
	color: #333;
	display: flex;
	flex-direction: column;
	font-family: 'Arial', sans-serif;
	height: 100vh;
	line-height: 1.6;
	margin: 0;
	overflow-x: hidden;
	padding: 20px;
}

.twoup {
	display: flex;
	justify-content: center;
	width: 100%;
}

.twoup img {
	border-radius: 5px;
	height: 100%;
	max-height: 80vh;
	object-fit: contain;
	width: auto;
}

.gallery {
	display: grid;
	grid-gap: 20px;
	grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
	padding: 20px;
	width: 100%;
}

.gallery-item {
	background-color: #fff;
	border: 1px solid #ddd;
	border-radius: 5px;
	box-shadow: 0 5px 15px rgba(0,0,0,0.1);
	display: flex;
	flex-direction: column;
	align-items: center;
	padding: 15px;
}

.gallery-item img {
	border-radius: 5px;
	height: auto;
	object-fit: cover;
	width: 100%;
}

gallery-item div.score {
	color: #007bff;
	font-size: 18px;
	margin-top: 10px;
}

.full-width-container {
	background-color: #f0f0f0;
	padding: 5px;
	text-align: center;
	width: 100%;
}

.code-block {
	background-color: #d0d0d0;
	padding: 10px;
	width: 98%;
}	
'''

if __name__ == "__main__":
	parser = OptionParser()
	parser.add_option("--dbname", dest="dbname", default=".elosortdb.sql3",	help="Name of rating database file", metavar="NAME")
	parser.add_option("--filetypes", dest="filetypes", default="jpg,png,gif", help="Comma separated list of file extensions", metavar="LIST")
	parser.add_option("--port", dest="port", default=8080, type="int", help="Port to run the server on", metavar="PORTNUM")
	(opts, args) = parser.parse_args()
	if args:
		basedir = args[0]
	else:
		basedir = "."
	basedir = os.path.abspath(basedir)
	dbfilename = os.path.join(basedir, opts.dbname)
	db = ELO_DB(dbfilename)
	filetypes = opts.filetypes.split(",")
	items = []
	for filetype in filetypes:
		items += glob.glob(os.path.join(basedir, f'*.{filetype}'))
	itemcollection = Depletable_Stack(items)

	cherry_config = {
		'global': {
			'server.socket_port': opts.port, 
			'log.screen': False,
			'log.access_file': '/dev/null',
			'log.error_file': '/dev/stdout',
		},
		'/static': {
			'tools.staticdir.on': True,	
			'tools.staticdir.dir': "/"
		},
	}
	cherrypy.quickstart(ELO_Sort(db, itemcollection), "/", config = cherry_config)

