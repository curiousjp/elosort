#!/usr/bin/env python

import cherrypy

from pathlib import Path
from argparse import ArgumentParser
from typing import Optional, Set, Tuple, List

import json
import math
import os
import random
import shelve
import sqlite3
import sys

STARTRATING = 1000

def setup_database(filename: str) -> None:
	conn = sqlite3.connect(filename)
	cursor = conn.cursor()
	try:
		cursor.execute('''CREATE TABLE IF NOT EXISTS shelf_data (key TEXT PRIMARY KEY, value REAL, ratings INTEGER DEFAULT 0)''')
		conn.commit()
	except sqlite3.Error as e:
		print(f'SQLite error occurred during database setup: {e}')
	finally:
		conn.close()

def set_ratings(items: dict, filename: str, changed: set) -> None:
	if not changed:
		return
	setup_database(filename)
	conn = sqlite3.connect(filename)
	cursor = conn.cursor()
	try:
		vals = [(k, v, k) for k, v in items.items() if k in changed]
		cursor.executemany('''INSERT OR REPLACE INTO shelf_data (key, value, ratings) VALUES (?, ?, COALESCE((SELECT ratings + 1 FROM shelf_data WHERE key = ?), 1))''', vals)
		conn.commit()
	except sqlite3.Error as e:
		print(f'SQLite error occurred: {e}')
	finally:
		conn.close()

def get_all_ratings(filename: str) -> List[Tuple[str, float]]:
	setup_database(filename)
	conn = sqlite3.connect(filename)
	cursor = conn.cursor()
	try:
		cursor.execute('''SELECT key, value, ratings FROM shelf_data ORDER BY value DESC''')
		return cursor.fetchall()
	except sqlite3.Error as e:
		print(f'SQLite error occurred: {e}')
	finally:
		conn.close()

def clean_shelf(preserved_keys: Set[str], filename: str) -> None:
	setup_database(filename)
	conn = sqlite3.connect(filename)
	cursor = conn.cursor()
	try:
		if preserved_keys:
			cursor.executemany('''INSERT OR IGNORE INTO shelf_data (key, value) VALUES(?, ?)''', [(k, STARTRATING) for k in preserved_keys])
			conn.commit()

		cursor.execute('SELECT key FROM shelf_data')
		all_keys = {row[0] for row in cursor.fetchall()}

		keys_to_remove = []
		for k in all_keys:
			p_k = Path(k)
			if not p_k.exists() or (preserved_keys and k not in preserved_keys):
				keys_to_remove.append(k)
		
		if keys_to_remove:
			print('About to remove the following keys from the database:')
			for k in keys_to_remove:
				print(f' - {k}')
			_ = input('Either press enter to continue or ctrl-C now to cancel this operation.')
		else:
			return
		# batch our keys
		for i in range(0, len(keys_to_remove), 900):
			batch = keys_to_remove[i:i+900]
			placeholders = ', '.join('?' for _ in batch)
			cursor.execute(f'''DELETE FROM shelf_data WHERE key IN ({placeholders})''', tuple(batch))
		conn.commit()
		print(f'Pruned {len(keys_to_remove)} keys.')
	except sqlite3.Error as e:
		print(f'SQLite error occured: {e}')
	finally:
		conn.close()

def wrap_media(fn, alt = None):
	if alt:
		alt_text = f'title="{alt}"'
	else:
		alt_text = ''
	if(fn.endswith('.mp4')):
		return f'<video controls autoplay loop muted data-path="{fn}"><source src="static/{fn}" type="video/mp4" {alt_text}/></video>'
	else:
		return f'<img data-path="{fn}" src="static/{fn}" {alt_text}/>'

def migrate_shelf_to_sqlite(filename):
	file_path = Path(filename)
	if file_path.suffix == '.sqlite':
		return filename
	sqlite_path = file_path.with_suffix('.sqlite')
	with shelve.open(str(file_path)) as shelf:
		if not isinstance(shelf, shelve.Shelf):
			raise ValueError(f"{filename} is not a valid shelf file.")
		setup_database(str(sqlite_path))
		conn = sqlite3.connect(str(sqlite_path))
		cursor = conn.cursor()
		cursor.executemany('''INSERT OR REPLACE INTO shelf_data (key, value) VALUES (?, ?)''', shelf.items())
		conn.commit()
		conn.close()
		print(f'** Migrated shelf from {filename} to {sqlite_path}.')
		#print(f'** Please restart with the new path.')
		#sys.exit(0)
		return str(sqlite_path)  # Return the path to the new SQLite file

class Depletable_Stack:
	def __init__(self, from_folder: str, session_length: int, db_location: str, prefilled: bool, poolshrink: int, patterns: List[str] = ['*.jpg', '*.png', '*.mp4', '*.gif']):
		self._iteration = 0
		self._poolshrink = poolshrink;
		self._dequeue_events = {}
		self._dbl = db_location
		self._session_length = session_length
		self._item_count = 0

		if not prefilled:
			directory = Path(from_folder)
			permanent_items = [str(file) for pattern in patterns for file in directory.rglob(pattern)]
			clean_shelf(set(permanent_items), self._dbl)
		else:
			clean_shelf(set(), self._dbl)
		
		self.shuffle()

	def shuffle(self):
		# get_all_ratings already sorts high to low
		ratings = get_all_ratings(self._dbl)
		self._item_count = len(ratings)
		print(f'~~ ratings: {len(ratings)}')
		if(self._poolshrink > 0):
			p_pool_size = math.ceil(len(ratings) * (1 - (self._iteration / (self._iteration + self._poolshrink))))
			if p_pool_size < len(ratings):
				print(f'~~ shrinking pool from {len(ratings)} to {p_pool_size}')
				ratings = ratings[:p_pool_size]
		
		rating_events_min = min(x[2] for x in ratings)
		rating_events_max = max(x[2] for x in ratings)
		if rating_events_min != rating_events_max:
			print(f'~~~ rating events diverged between {rating_events_min} and {rating_events_max}')
			print(f'~~~ limiting pool to the less rated items and postponing iteration increment')
			print(f'~~~ pool was {len(ratings)}')
			underscored = [x for x in ratings if x[2] == rating_events_min]
			if len(underscored) == 1:
				underscored.append(random.choice(x for x in ratings if x[0] != underscored[0][0]))
			ratings = underscored
			print(f'~~~ pool now {len(ratings)}')
		else:
			self._iteration += 1
		
		tiers = {1: [], 2: [], 3: [], 4: []}
		elo_min = min(x[1] for x in ratings)
		elo_step = (max(x[1] for x in ratings) + 1 - elo_min) / len(tiers)
		for k in tiers.keys():
			tiers[k] = [x[0] for x in ratings if elo_min + ((k-1) * elo_step) <= x[1] < elo_min + ((k) * elo_step)]
			print(f'~~~ tier {k}, items: {len(tiers[k])}')

		matchups = []
		leftovers = []
		for tier, items in tiers.items():
			candidates = leftovers + items
			leftovers = []
			random.shuffle(candidates)
			while len(candidates) >= 2:
				matchups.append((candidates.pop(), candidates.pop()))
			if(candidates):
				leftovers.extend(candidates)
		if leftovers:
			for leftover in leftovers:
				matchups.append((leftover, random.choice([x[0] for x in ratings if x[0] != leftover])))
				print(f'pairing leftover with random item:')
				print(f'  {matchups[-1]}')

		test_pool = set(x[0] for x in ratings)
		test_pool -= set(x[0] for x in matchups)
		test_pool -= set(x[1] for x in matchups)
		print(f'remaining test pool is: {test_pool}')

		print(f'~~ matchups: {len(matchups)}')

		if(self._session_length > 0):
			matchups = matchups[:self._session_length]
		print(f'~~ stack size: {len(matchups)}')
		self._temporary_stack = matchups[::-1]

	def stack_remaining(self):
		return len(self._temporary_stack)
	
	def view_stack(self):
		return self._temporary_stack[:]

	def peek(self):
		if len(self._temporary_stack) == 0:
			self.shuffle()
		return self._temporary_stack[0]
	
	def dequeue(self, pair):
		if pair in self._temporary_stack:
			self._dequeue_events[pair[0]] = self._dequeue_events.get(pair[0], 0) + 1
			self._dequeue_events[pair[1]] = self._dequeue_events.get(pair[1], 0) + 1
			self._temporary_stack.remove(pair)

class Elo_Tournament:
	def __init__(self, items: Depletable_Stack, db_location: str, top: float, script_text: str = ''):
		self.items = items
		self.top = top
		self.script_text = script_text
		self._dbl = db_location

	def score_match(self, a: str, b: str, ratings: dict, a_score: float, b_score: float, k: float = 16):
		"""Returns the new ratings of a and b. Special case here for 0, 0 - punish both candidates with a loss"""
		a_rating = ratings.get(a, STARTRATING)
		b_rating = ratings.get(b, STARTRATING)

		if a_score == 0.5 and b_score == 0.5:
			return (a_rating, b_rating)

		a_expected = 1.0 / (1.0 + (10.0 ** ((b_rating - a_rating) / 400.0)))
		b_expected = 1.0 / (1.0 + (10.0 ** ((a_rating - b_rating) / 400.0)))

		new_a_rating = a_rating + k * (a_score - a_expected)
		new_b_rating = b_rating + k * (b_score - b_expected)

		return (new_a_rating, new_b_rating)

	def menu_div(self, tag: str = 'Clean URL and Continue Rating') -> str:
		if self.top >= 1:
			cutoff = self.top
		else:
			# a bit awkward
			cutoff = round(self.top * len(self.items._item_count))

		return f'''
<div class="full-width-container">
	<p align="center"><a href="/results">See Results</a> - <a href="/">{tag}</a> - <a href="/massvote">Mass Vote</a> - <a href="/script?offset={cutoff}">Purge</a> - {self.items.stack_remaining()} remaining</p>
</div>'''

	@cherrypy.expose
	def massvote(self, votes = []) -> str:
		score_data = get_all_ratings(self._dbl)
		ratings = {k:v for (k,v,r) in score_data}
		changed = set()
		ratings_dirty = False

		if isinstance(votes, str):
			votes = [votes]
		for vote in votes:
			vote_data = json.loads(vote)
			a = vote_data['a']
			b = vote_data['b']
			if(vote_data['result'] == 1):
				a_result = 1;
				b_result = 0;
			elif(vote_data['result'] == 0):
				a_result = 0;
				b_result = 1;
			else:
				continue
			new_a_rating, new_b_rating = self.score_match(a, b, ratings, a_result, b_result)
			changed.add(a)
			changed.add(b)
			ratings[a] = new_a_rating
			ratings[b] = new_b_rating
			self.items.dequeue((a, b))
			self.items.dequeue((b, a))
		
		if changed:
			set_ratings(ratings, self._dbl, changed)

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		{self.script_text}
		document.addEventListener('keyup', KeyPressed);
		function KeyPressed( e ) {{
			var key = (window.event) ? event.keyCode : e.keyCode;
			switch(key) {{
				case 90: //z
					scrollToNext();
					break;
			}}
		}}

        function scrollToNext() {{
            const scoringAreas = document.querySelectorAll('.scoring-area');
            for (let i = 0; i < scoringAreas.length; i++) {{
                const rect = scoringAreas[i].getBoundingClientRect();
                if (rect.top > 1) {{
                    scoringAreas[i].scrollIntoView({{behavior: 'smooth', block: 'start'}});
                    break;
                }}
            }}
        }}

		function selectImage(selectedItem) {{
		    let container = selectedItem.parentNode;
		    container.querySelectorAll('.scoring-item').forEach(function(item) {{
            	item.classList.remove('prestige');
			}});
			selectedItem.classList.add('prestige');
		}}

	    function submitVotes() {{
			let form = document.getElementById('massVoteForm');
			form.innerHTML = '';
			document.querySelectorAll('.scoring-area').forEach(function(matchup) {{
				let items = matchup.querySelectorAll('.scoring-item');
	            let item1 = items[0].querySelector('img, video');
    	        let item2 = items[1].querySelector('img, video');
	            let selectedItem = matchup.querySelector('.prestige img, .prestige video');
            	if (selectedItem) {{
					let result = selectedItem === item1 ? 1.0 : 0.0;
					let im1Src = item1.dataset.path;
					let im2Src = item2.dataset.path;
			
					form.appendChild(createHiddenInput('votes', JSON.stringify({{ a: im1Src, b: im2Src, result: result }})));
				}}
	        }});
        	form.submit();
		}}

		function createHiddenInput(name, value) {{
			let input = document.createElement('input');
			input.type = 'hidden';
			input.name = name;
			input.value = value;
			return input;
		}}
	</script>
</head>
<body class='massvote'>
    <form id='massVoteForm' action='/massvote' method='POST'>
	</form>
	{self.menu_div('Return to Single Scoring')}'''
		stack_copy = self.items.view_stack()
		if len(stack_copy) == 0:
			self.items.peek()
			stack_copy = self.items.view_stack()
		for pairing in self.items.view_stack():
			im1, im2 = pairing
			element1 = wrap_media(im1, ratings.get(im1, STARTRATING))
			element2 = wrap_media(im2, ratings.get(im2, STARTRATING))

			template += f'''
	<div class="scoring-area">
		<div class="scoring-item" onclick="selectImage(this)">{element1}</div>
		<div class="scoring-item" onclick="selectImage(this)">{element2}</div>
	</div>'''
		template += f'''
    <div class='full-width-container'>
	    <button onclick='submitVotes()'>Submit Votes</button>
	</div>
</body>
</html>
'''
		return template



	@cherrypy.expose 
	def index(self, a = None, b = None, result = None, force_im1 = None, force_im2 = None, count = None) -> str:
		score_data = get_all_ratings(self._dbl)
		ratings = {k:v for (k,v,r) in score_data}
		changed = set()

		if a and b and result:
			try:
				# result value here is a's result
				result_value = float(result)
				if result_value not in [-1.0, 0.0, 0.5, 1.0]:
					raise ValueError('result must be -1.0, 0.0, 0.5, or 1.0')
				elif result_value == 0:
					# a loss
					a_result, b_result = 0, 1
				elif result_value == 1:
					# a win
					a_result, b_result = 1, 0
				elif result_value == -1:
					# punish
					a_result, b_result = 0, 0
				else:
					# draw
					a_result, b_result = 0.5, 0.5
				new_a_rating, new_b_rating = self.score_match(a, b, ratings, a_result, b_result)
				ratings[a] = new_a_rating
				ratings[b] = new_b_rating
				changed.add(a)
				changed.add(b)
				self.items.dequeue((a, b))
				self.items.dequeue((b, a))
			except ValueError as ve:
				return f'ValueError: {repr(ve)}'

		if changed:
			set_ratings(ratings, self._dbl, changed)

		# we can now peek safely as the item is not dequeued until it is voted on
		im1, im2 = self.items.peek()
		if force_im1:
			im1 = force_im1
		if force_im2:
			im2 = force_im2

		element1 = wrap_media(im1, ratings.get(im1, STARTRATING))
		element2 = wrap_media(im2, ratings.get(im2, STARTRATING))

		if count:
			rc_clause = f'&count={count}'
		else:
			rc_clause = ''

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		{self.script_text}
		document.addEventListener('keyup', KeyPressed);
		function KeyPressed( e ) {{
			var key = ( window.event ) ? event.keyCode : e.keyCode;

			switch( key ) {{
				case 33: //pageup <-- kensington presenter
				case 37: //left
				case 65: //a
					window.location.href="/?a={im1}&b={im2}&result=1.0"
					break;
				case 116://f5 <-- kensington presenter
				case 38: //up
				case 87: //w
					window.location.href="/?a={im1}&b={im2}&result=0.5"
					break;
				case 34: //page down <-- kensington presenter
				case 39: //right
				case 68: //d
					window.location.href="/?a={im2}&b={im1}&result=1.0"
					break;
				case 66: //b <-- kensington presenter
				case 40: //down
				case 83: //s
					window.location.href="/results{rc_clause}"
					break;
				case 46: //del
					window.location.href="/?a={im2}&b={im1}&result=-1.0"
					break;
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Punt')}
	<div class="scoring-area">
		<div class="scoring-item"><a href="/?a={im1}&b={im2}&result=1">{element1}</a></div>
		<div class="scoring-item"><a href="/?a={im2}&b={im1}&result=1">{element2}</a></div>
	</div>
</body>
</html>
'''
		return template

	@cherrypy.expose
	def script(self, offset: int = 20) -> str:
		offset = int(offset)
		results = get_all_ratings(self._dbl)
		results = results[offset:]
		commands = '\n'.join([f'rm "{item[0]}" # {item[1]}' for item in results])
		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<script language="javascript" type="text/javascript">
		{self.script_text}
		function selectText(element) {{
			if(window.getSelection) {{
				const selection = window.getSelection();
				const range = document.createRange();
				range.selectNodeContents(element);
				selection.removeAllRanges();
				selection.addRange(range)
			}}
		}}
	</script>
</head>
<body>
	{self.menu_div('Return to Scoring')}
	<div class="code-block">
		<pre># you can call this page with different ?offset= arguments to preserve more files from deletion - currently {offset}. offset: <a href="/script?offset=10">10</a> - <a href="/script?offset=20">20</a> - <a href="/script?offset=30">30</a> - <a href="/script?offset=40">40</a> - <a href="/script?offset=60">60</a> - <a href="/script?offset=80">80</a> - <a href="/script?offset=100">100</a></pre>
		<pre onclick="selectText(this)">{commands}</pre>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def results(self, start: int = 0, count: int = 0, switch_a: str = None, switch_b: str = None) -> str:
		score_data = get_all_ratings(self._dbl)
		ratings = {k:v for (k,v,r) in score_data}
		changed = set()

		if switch_a and switch_b:
			old_a_rating = ratings.get(switch_a, STARTRATING)
			old_b_rating = ratings.get(switch_b, STARTRATING)
			changed.add(switch_a)
			changed.add(switch_b)
			ratings[switch_a] = old_b_rating
			ratings[switch_b] = old_a_rating
			score_data = sorted(ratings.items(), key=lambda x: x[1], reverse=True)

		if changed:
			set_ratings(ratings, self._dbl, changed)

		start = max(0, int(start))
		count = max(0, int(count))

		if start > 0 and count == 0:
			results = score_data[start:]
		elif start > 0 and count > 0:
			results = score_data[start:start+count]
		elif count > 0:
			results = score_data[:count]
		else:
			results = score_data[:]

		gallery_items = []

		if self.top >= 1:
			cutoff = self.top
		else:
			cutoff = round(self.top * len(results))

		for index, x in enumerate(results):
			element = wrap_media(x[0])
			gallery_items.append(f'<div class="gallery-item {"prestige" if index < cutoff else ""}">{element}<div class="score">Score: {x[1]:.3f}</div></div>')
		gallery_string = '\n'.join(gallery_items)

		template = f'''<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="/stylesheet" type="text/css">
	<style>
		.highlighted {{
			border: 2px solid purple;
		}}
	</style>
	<script language="javascript" type="text/javascript">
		{self.script_text}
		document.addEventListener('DOMContentLoaded', () => {{
			const divs = document.querySelectorAll('div.gallery-item');
			const contest_link = document.getElementById('contestLink');
			const switch_link = document.getElementById('switchLink');
			const start={start};
			const count={count};

			contest_link.removeAttribute('href');
			contest_link.style.pointerEvents = 'none';
			contest_link.style.opacity = 0.5;

			switch_link.removeAttribute('href');
			switch_link.style.pointerEvents = 'none';
			switch_link.style.opacity = 0.5;

			let highlighted = [];

			divs.forEach(div => {{
				div.addEventListener('click', () => {{
					// Add or remove highlight from the clicked div
					div.classList.toggle('highlighted');
					// Update the array of highlighted divs
					if(div.classList.contains('highlighted')) {{
						highlighted.push(div);
					}} else {{
						highlighted = highlighted.filter(h => h !== div);
					}}
					// If more than two divs are highlighted, unhighlight the oldest one
					if(highlighted.length > 2) {{
						highlighted[0].classList.remove('highlighted');
						highlighted.shift();
					}}
					// If exactly two divs are highlighted, enable the matchup link
					if(highlighted.length == 2) {{
						const first_image = highlighted[0].querySelector('img') || highlighted[0].querySelector('video');
						const second_image = highlighted[1].querySelector('img') || highlighted[1].querySelector('video');
						let first_item = first_image.dataset.path;
						let second_item = second_image.dataset.path;

						if(first_item.startsWith('static/')) {{
							first_item = first_item.slice(7);
						}}
						if(second_item.startsWith('static/')) {{
							second_item = second_item.slice(7);
						}}

						contest_link.href = '/?force_im1=' + first_item + '&force_im2=' + second_item;
						if(count>0) contest_link.href += '&count=' + count;
						if(start>0) contest_link.href += '&start=' + start;
						contest_link.style.pointerEvents = 'auto';
						contest_link.style.opacity = 1;

						switch_link.href = '/results?switch_a=' + first_item + '&switch_b=' + second_item;
						if(count>0) switch_link.href += '&count=' + count;
						if(start>0) switch_link.href += '&start=' + start;
						switch_link.style.pointerEvents = 'auto';
						switch_link.style.opacity = 1;
					}} else {{
						contest_link.removeAttribute('href');
						contest_link.style.pointerEvents = 'none';
						contest_link.style.opacity = 0.5;
						
						switch_link.removeAttribute('href');
						switch_link.style.pointerEvents = 'none';
						switch_link.style.opacity = 0.5;

					}}
				}});
			}});
		}});
	</script>
</head>
<body>
	{self.menu_div('Continue Rating')}
	<div class="full-width-container">
		<a id="contestLink" href="/">Force Matchup between Clicked Items</a> - <a id="switchLink" href="/results">Switch Clicked Items</a>
	</div>
	<div class="gallery">
		{gallery_string}
	</div>
	<div class="full-width-container">
		<p><a href='?start={int(start-count)}&count={count}'>Back</a> / <a href='?start={int(start+count)}&count={count}'>Forwards</a></p>
	</div>
</body>
</html>
'''
		return template
	
	@cherrypy.expose
	def stylesheet(self) -> str:
		cherrypy.response.headers['Content-Type'] = 'text/css'
		return '''
/* reset some basic styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* full-page layout */
html, body {
    height: 100%;
    display: flex;
    flex-direction: column;
}

/* menu styles */
.full-width-container {
    background-color: #f0f0f0;
    padding: 5px;
    text-align: center;
    width: 100%;
}

/* code display */
.code-block {
    background-color: #d0d0d0;
    padding: 10px;
    width: 98%
}

/* the scoring area, under the menu */
.scoring-area {
    display: flex;
    flex-grow: 1;
    width: 100%;
    height: 0; /* sets the 'default' height that flex-grow then works around */
}
.massvote .scoring-area {
	height: auto; /* reset the height so we can go down the page */
}

/* visual items default to side-by-side in landscape mode */
.scoring-item {
    flex-grow: 1;
    display: flex;
    align-items: center;
    overflow: hidden;
    padding: 15px; /* Padding around the visual items */
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    margin: 10px; /* Adds space between items */
	pointer-events: none; /* avoid click events on the inflated <a> */
}
.massvote .scoring-item {
    pointer-events: auto;
}

/* Left item should be right-aligned */
.scoring-item:first-child {
    justify-content: flex-end;
}

/* Right item should be left-aligned */
.scoring-item:last-child {
    justify-content: flex-start;
}

/* inflate the hyperlink so the image / video can inherit height */
.scoring-item a {
	display: inline-flex;
	justify-content: center;
	align-items: center;
	height: 100%;
	width: 100%;
}

/* ensure the img or video fills the non-layout dimension */
.scoring-item img, .scoring-item video {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 5px;
	pointer-events: auto;
}

/* vertical stacking for portrait screens */
@media (max-aspect-ratio: 1/1) {
    .scoring-area {
        flex-direction: column;
    }
	.massvote .scoring-area {
		/* but not for massvote */
	    flex-direction: row;
	}

    /* Remove alignment adjustments in vertical mode */
    .scoring-item:first-child,
    .scoring-item:last-child {
        justify-content: center;
    }
}

/* grid for the review screen */
.gallery {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    padding: 20px;
    width: 100%;
}

.gallery-item {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 15px;
}

.prestige {
    background-color: #FFCC66;
}

.gallery-item img, .gallery-item video {
    border-radius: 5px;
    height: auto;
    object-fit: cover;
    width: 100%;
}

gallery-item div.score {
    color: #007bff;
    font-size: 18px;
    margin-top: 10px;
}
'''

if __name__ == "__main__":
	global FILE_LOCATION
	parser = ArgumentParser()
	parser.add_argument('-p', '--port', dest='port', default=9090, type=int, help='port to run the server on', metavar='PORTNUM')
	parser.add_argument('-l', '--poolshrink', dest='poolshrink', default=50, type=int, help='k value for poolshrinking (disable with -1)', metavar='POOLSHRINK')
	parser.add_argument('-s', '--session', dest='session', default=-1, type=int, help='number of image pairs to test before refilling the stack', metavar='SESSION')
	parser.add_argument('-t', '--top', dest='top', default=20, type=int, help='items to highlight, default for /script', metavar='TOP')
	parser.add_argument('-c', '--script', dest='script', default=None, type=str, help='optional script to inject into page headers for accessibility helpers', metavar='SCRIPT')
	parser.add_argument('-d', '--dbname', dest='dbname', default='scores.shelf', type=str, help='name of ratings database file', metavar='NAME')
	parser.add_argument('-r', '--prefilled', dest='prefilled', action='store_true', help='whether the ratings database file has been prepopulated')
	parser.add_argument('-b', '--basedir', default='.', type=str, help='the folder to read files from if not using a prepopulated ratings database file', metavar='FOLDER')
	parser.add_argument('-vo', '--videoonly', dest='video_only', action='store_true', help='whether to only include mp4 video in the files spidered')
	parser.add_argument('-v', '--video', dest='video', action='store_true', help='whether to include mp4 video in the files spidered')

	args = parser.parse_args()

	if args.video_only:
		extensions = ['*.mp4']
	else:
		extensions = ['*.jpg', '*.png', '*.gif']
		if args.video:
			extensions.append('*.mp4')

	args.dbname = migrate_shelf_to_sqlite(args.dbname)
	
	basedir = os.path.abspath(args.basedir)
	itemcollection = Depletable_Stack(basedir, args.session, args.dbname, args.prefilled, args.poolshrink, patterns = extensions)

	if args.script:
		with open(args.script, 'rt') as fh:
			script_text = fh.read()
	else:
		script_text = ''

	cherry_config = {
		'global': {
			'server.socket_port': args.port, 
			'log.screen': False,
			'log.access_file': '/dev/null',
			'log.error_file': '/dev/stdout',
		},
		'/static': {
			'tools.staticdir.on': True,	
			'tools.staticdir.dir': '/'
		},
	}
	cherrypy.quickstart(Elo_Tournament(itemcollection, args.dbname, args.top, script_text), '/', config = cherry_config)

